<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

	<util:properties id="config" location="classpath:config.properties" />

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 启用支持Annotation注解方式的事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 把标记了@Controller等注解的类转换为bean -->
	<context:component-scan base-package="com.wemall" />

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" 
		/> -->
	<!--文件上传设置 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize">
			<value>10485760</value><!-- 文件上传最大为10M -->
		</property>
		<property name="maxInMemorySize" value="4096" />
	</bean>
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean id="velocityCongfig"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath">
			<value>/</value>
		</property>
		<property name="velocityProperties">
			<props>
				<prop key="input.encoding">UTF-8</prop>
				<prop key="output.encoding ">UTF-8</prop>
			</props>
		</property>
	</bean>
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.velocity.VelocityView" />
		<property name="contentType">
			<value>text/html;charset=UTF-8</value>
		</property>
	</bean>
	<!-- property-placeholder是一个属性遍历器，定位一个属性文件，属性文件存放的是jdbc一些连接数据 -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!--配置velocity engine默认路径 -->
	<bean id="velocityEngine"
		class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="resourceLoaderPath" value="/velocity/"></property>
	</bean>
	<!-- 配置jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${mysqlbase.url}" />
		<property name="username" value="${mysqlbase.user}" />
		<property name="password" value="${mysqlbase.password}" />
		<property name="driverClassName" value="${driver}" />
		<property name="filters" value="config" />
		<property name="maxActive" value="${maxActive}" />
		<property name="initialSize" value="${initialSize}" />
		<property name="maxWait" value="${maxWait}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${logAbandoned}" />
		<property name="connectionProperties" value="config.decrypt=false" />
	</bean>
	<bean name="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceXmlLocation" value="classpath:persistence.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="database" value="MYSQL" />
				<property name="showSql" value="false" />
				<property name="generateDdl" value="false" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<!-- 自定义方言 -->
				<prop key="hibernate.dialect">
					com.wemall.core.dialect.SystemMySQL5Dialect
				</prop>
				<!-- 二级缓存配置 -->
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.SingletonEhCacheProvider
				</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.use_sql_comments">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.generate_statistics">true</prop>
			</props>
		</property>
	</bean>
	<!-- 定义了与实体相关的dao -->
	<bean id="genericEntityDao" class="com.wemall.core.base.GenericEntityDao"
		scope="prototype" lazy-init="true">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<!--使用泛型DAO作为抽象基类 abstract="true" -->
	<bean id="genericDAO" class="com.wemall.core.base.GenericDAO"
		abstract="true" depends-on="genericEntityDao">
		<property name="geDao">
			<ref bean="genericEntityDao" />
		</property>
	</bean>

    <bean id="sessionFactory" factory-bean="entityManagerFactory"
          factory-method="getSessionFactory" />

	<bean id="hibernateInterceptor" class="org.springframework.orm.hibernate3.HibernateInterceptor"
		autowire="byName">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<aop:config>
		<aop:pointcut id="methodPoint"
			expression="execution(* com.wemall.manage.timer.*.*(..)) " /><!--在该切入点使用hibernate拦截器 -->
		<aop:advisor pointcut-ref="methodPoint" advice-ref="hibernateInterceptor" />
	</aop:config>
	<!-- 系统调度控制器 -->
	<bean id="statTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="shop_stat" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="stat_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="statTask" />
		<property name="cronExpression" value="0 */30 * * * ?" />
	</bean>

	<bean id="jobTask"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="shop_job" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>
	<bean id="job_cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="jobTask" />
		<property name="cronExpression" value="1 0 0 * * ?" />
	</bean>

	<bean id="getJdTokenQuartz" class="com.wemall.manage.quartz.GetJdTokenQuartz" />
	<bean id="getJdTokenJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="getJdTokenQuartz" />
		<property name="targetMethod" value="execute" />
	</bean>
	<bean id="getJdTokenTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="getJdTokenJobDetail" />
		<property name="cronExpression" value="0 19 11 * * ?" />
	</bean>

	<bean id="getWxTokenQuartz" class="com.wemall.manage.quartz.GetWxTokenQuartz" />
	<bean id="getWxTokenJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="getWxTokenQuartz" />
		<property name="targetMethod" value="execute" />
	</bean>
	<bean id="getWxTokenTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="getWxTokenJobDetail" />
		<property name="cronExpression" value="0 0/50 * * * ?" />
	</bean>

	<bean id="jDGoodsQuartz" class="com.wemall.manage.quartz.JDGoodsQuartz" />
	<bean id="jDGoodsQuartzJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="jDGoodsQuartz" />
		<property name="targetMethod" value="execute" />
	</bean>
	<bean id="jDGoodsQuartzTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="jDGoodsQuartzJobDetail" />
		<property name="cronExpression" value="0 43 21 * * ?" />
	</bean>

	<bean id="schdulerFactory" lazy-init="false"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<!-- jd获取token -->
				<ref bean="getJdTokenTrigger" />
               <!-- <ref bean="getWxTokenTrigger"/>-->
				<!-- jd商品同步 -->
				<ref bean="jDGoodsQuartzTrigger" />
				<!-- 订单自动任务 -->
				<ref bean="stat_cronTrigger" />
				<ref bean="job_cronTrigger" />
				<ref bean="getWxTokenTrigger" />
			</list>
		</property>
	</bean>
</beans>